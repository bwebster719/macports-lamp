#!/bin/bash

if [ -z "$SUDO_USER" ]; then
  echo "Please run the script using sudo, e.g.,"
  echo ""
  echo "sudo ./build_lamp"
  exit 1
fi
DATESTRING=$(date +"%y%m%d%H%M")

PORTFOUND=$(type -P port)
if [ "$PORTFOUND" == "" ]; then
  echo "port command not found. Please ensure that MacPorts has been installed."
  echo "Then log out, log in, and try again."
  exit 1
fi

# Update ports tree.
#port selfupdate

# Remove startup items; these will be replaced.
if [ -L /Library/LaunchDaemons/org.macports.apache2.plist ]; then
  rm /Library/LaunchDaemons/org.macports.apache2.plist
fi
if [ -L /Library/LaunchDaemons/org.macports.slapd.plist ]; then
  rm /Library/LaunchDaemons/org.macports.slapd.plist
fi
if [ -L /Library/LaunchDaemons/org.macports.slapd.plist ]; then
  rm /Library/LaunchDaemons/org.macports.MailHog.plist 
fi

# Move MacPorts Python application out of the way to prevent stoppage.
for i in /Applications/MacPorts/Python*; do
  echo mv "$i" "${i}.${DATESTRING}"
done

# Install apache2 and friends.
port -N install apache2
/opt/local/bin/apxs -a -e -n rewrite mod_rewrite.so

defSock='/opt/local/var/run/mysql8/mysqld.sock'


# Install PHP 8.0.
port -N install php80-apache2handler
port -N install php80-mysql +mysql8
port -N install php80-gd php80-mbstring php80-mcrypt php80-opcache
port -N install php80-iconv php80-xdebug php80-openssl
port -N install php80-curl
port -N install php80-gmp
port -N install php80-ldap

cat /opt/local/etc/php80/php.ini-development | sed \
  -e "s#pdo_mysql\.default_socket.*#pdo_mysql\.default_socket=${defSock}#" \
  -e "s#mysql\.default_socket.*#mysql\.default_socket=${defSock}#" \
  -e "s#mysqli\.default_socket.*#mysqli\.default_socket=${defSock}#" > /opt/local/etc/php80/php.ini
echo "date.timezone = 'America/Chicago'" >> /opt/local/etc/php80/php.ini
echo "error_log = /var/log/php.log" >> /opt/local/etc/php80/php.ini
echo "xdebug.output_dir = '/tmp'" >> /opt/local/etc/php80/php.ini
echo "xdebug.mode = profile" >> /opt/local/etc/php80/php.ini
# Increase memory limit to 1024M
sed -Ei '' 's/(memory_limit = )[0-9]+M/\11024M/g' /opt/local/etc/php80/php.ini
# Increase file upload size to 75M
sed -Ei '' 's/(upload_max_filesize = )[0-9]+M/\175M/g' /opt/local/etc/php80/php.ini
sed -Ei '' 's/(post_max_size = )[0-9]+M/\175M/g' /opt/local/etc/php80/php.ini
# Increase max_execution_time to 8 minutes
sed -Ei '' 's/(max_execution_time = )[0-9]+/\1480/g' /opt/local/etc/php80/php.ini
/opt/local/bin/apxs -a -e -n php mod_php80.so

# Install PHP 8.1.
port -N install php81-apache2handler
port -N install php81-mysql +mysql8
port -N install php81-gd php81-mbstring php81-mcrypt php81-opcache
port -N install php81-iconv php81-xdebug php81-openssl
port -N install php81-curl
port -N install php81-gmp
port -N install php81-ldap

cat /opt/local/etc/php81/php.ini-development | sed \
  -e "s#pdo_mysql\.default_socket.*#pdo_mysql\.default_socket=${defSock}#" \
  -e "s#mysql\.default_socket.*#mysql\.default_socket=${defSock}#" \
  -e "s#mysqli\.default_socket.*#mysqli\.default_socket=${defSock}#" > /opt/local/etc/php81/php.ini
echo "date.timezone = 'America/Chicago'" >> /opt/local/etc/php81/php.ini
echo "error_log = /var/log/php.log" >> /opt/local/etc/php81/php.ini
echo "xdebug.output_dir = '/tmp'" >> /opt/local/etc/php81/php.ini
echo "xdebug.mode = profile" >> /opt/local/etc/php81/php.ini
# Increase memory limit to 1024M
sed -Ei '' 's/(memory_limit = )[0-9]+M/\11024M/g' /opt/local/etc/php81/php.ini
# Increase file upload size to 75M
sed -Ei '' 's/(upload_max_filesize = )[0-9]+M/\175M/g' /opt/local/etc/php81/php.ini
sed -Ei '' 's/(post_max_size = )[0-9]+M/\175M/g' /opt/local/etc/php81/php.ini
# Increase max_execution_time to 8 minutes
sed -Ei '' 's/(max_execution_time = )[0-9]+/\1480/g' /opt/local/etc/php81/php.ini
/opt/local/bin/apxs -a -e -n php mod_php81.so

# Install PHP 8.2.
port -N install php82-apache2handler
port -N install php82-mysql +mysql8
port -N install php82-gd php82-mbstring php82-mcrypt php82-opcache
port -N install php82-iconv php82-xdebug php82-openssl
port -N install php82-curl
port -N install php82-gmp
port -N install php82-ldap

cat /opt/local/etc/php82/php.ini-development | sed \
  -e "s#pdo_mysql\.default_socket.*#pdo_mysql\.default_socket=${defSock}#" \
  -e "s#mysql\.default_socket.*#mysql\.default_socket=${defSock}#" \
  -e "s#mysqli\.default_socket.*#mysqli\.default_socket=${defSock}#" > /opt/local/etc/php82/php.ini
echo "date.timezone = 'America/Chicago'" >> /opt/local/etc/php82/php.ini
echo "error_log = /var/log/php.log" >> /opt/local/etc/php82/php.ini
echo "xdebug.output_dir = '/tmp'" >> /opt/local/etc/php82/php.ini
echo "xdebug.mode = profile" >> /opt/local/etc/php82/php.ini
# Increase memory limit to 1024M
sed -Ei '' 's/(memory_limit = )[0-9]+M/\11024M/g' /opt/local/etc/php82/php.ini
# Increase file upload size to 75M
sed -Ei '' 's/(upload_max_filesize = )[0-9]+M/\175M/g' /opt/local/etc/php82/php.ini
sed -Ei '' 's/(post_max_size = )[0-9]+M/\175M/g' /opt/local/etc/php82/php.ini
# Increase max_execution_time to 8 minutes
sed -Ei '' 's/(max_execution_time = )[0-9]+/\1480/g' /opt/local/etc/php82/php.ini
/opt/local/bin/apxs -A -e -n php mod_php82.so

# Install PHP 8.3.
port -N install php83-apache2handler
port -N install php83-mysql +mysql8
port -N install php83-gd php83-mbstring php83-mcrypt php83-opcache
port -N install php83-iconv php83-xdebug php83-openssl
port -N install php83-curl
port -N install php83-gmp
port -N install php83-ldap

cat /opt/local/etc/php83/php.ini-development | sed \
  -e "s#pdo_mysql\.default_socket.*#pdo_mysql\.default_socket=${defSock}#" \
  -e "s#mysql\.default_socket.*#mysql\.default_socket=${defSock}#" \
  -e "s#mysqli\.default_socket.*#mysqli\.default_socket=${defSock}#" > /opt/local/etc/php83/php.ini
echo "date.timezone = 'America/Chicago'" >> /opt/local/etc/php83/php.ini
echo "error_log = /var/log/php.log" >> /opt/local/etc/php83/php.ini
echo "xdebug.output_dir = '/tmp'" >> /opt/local/etc/php83/php.ini
echo "xdebug.mode = profile" >> /opt/local/etc/php83/php.ini
# Increase memory limit to 1024M
sed -Ei '' 's/(memory_limit = )[0-9]+M/\11024M/g' /opt/local/etc/php83/php.ini
# Increase file upload size to 75M
sed -Ei '' 's/(upload_max_filesize = )[0-9]+M/\175M/g' /opt/local/etc/php83/php.ini
sed -Ei '' 's/(post_max_size = )[0-9]+M/\175M/g' /opt/local/etc/php83/php.ini
# Increase max_execution_time to 8 minutes
sed -Ei '' 's/(max_execution_time = )[0-9]+/\1480/g' /opt/local/etc/php83/php.ini
/opt/local/bin/apxs -A -e -n php mod_php83.so

# PHP will log errors to /var/log/php.log.
touch /var/log/php.log
chown _www /var/log/php.log

chown -R g+w /var/log/apache2

# If user has existing httpd.conf, httpd-vhosts.conf and httpd-default.conf back them up.
cp /opt/local/etc/apache2/httpd.conf /opt/local/etc/apache2/httpd.conf.bak
if [ -e /opt/local/etc/apache2/extra/httpd-vhosts.conf ]; then
  cp /opt/local/etc/apache2/extra/httpd-vhosts.conf /opt/local/etc/apache2/extra/httpd-vhosts.conf.bak
fi
if [ -e /opt/local/etc/apache2/extra/httpd-default.conf ]; then
  cp /opt/local/etc/apache2/extra/httpd-default.conf /opt/local/etc/apache2/extra/httpd-default.conf.bak
fi
# Enable defaults.
cp /opt/local/etc/apache2/extra/httpd-default.conf.orig /opt/local/etc/apache2/extra/httpd-default.conf

# Websites will live in ~/Sites.
WWWROOT="/Users/${SUDO_USER}/Sites"
mkdir -p "$WWWROOT"
chown "$SUDO_USER $WWWROOT"

# Provide default document that explains what is happening instead of MacPorts
# default "It Works!" page.
sh -c "echo '<html><body><p>You have reached the MacPorts default virtualhost. Try changing the hostname of your request to http://local.test/</p></body></html>' > /opt/local/www/apache2/html/index.html"

FQHN=$(hostname)
echo "127.0.0.1 local.test" >> /etc/hosts
# Uncomment the lines in httpd.conf to enable loading of vhost and default settings.
sed -i '' -e 's,#\(Include etc/apache2/extra/httpd-vhosts.conf\),\1,g' /opt/local/etc/apache2/httpd.conf
sed -i '' -e 's,#\(Include etc/apache2/extra/httpd-default.conf\),\1,g' /opt/local/etc/apache2/httpd.conf
echo "ServerName $FQHN:80" >> /opt/local/etc/apache2/httpd.conf
echo "Include etc/apache2/extra/mod_php81.conf" >> /opt/local/etc/apache2/httpd.conf
echo "<VirtualHost *:80>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    ServerName local.test" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    DocumentRoot "$HOME/Sites"" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    <Directory "$HOME/Sites">" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      Options Indexes FollowSymLinks" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      DirectoryIndex index.php index.html" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      Require local" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      AllowOverride All" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    </Directory>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "</VirtualHost>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "<VirtualHost *:443>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    ServerName local.test" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    ServerAlias *.local.test" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    DocumentRoot "$HOME/Sites"" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    SSLCertificateFile /opt/local/etc/apache2/server.crt" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    SSLCertificateKeyFile /opt/local/etc/apache2/server.key" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    <Directory "$HOME/Sites">" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      Options Indexes FollowSymLinks" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      DirectoryIndex index.php index.html" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      Require local" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "      AllowOverride All" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "    </Directory>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf
echo "</VirtualHost>" >> /opt/local/etc/apache2/extra/httpd-vhosts.conf

# Build local cert.
cd /opt/local/etc/apache2
# Create certificate authority.
openssl req -new -days 3650 -nodes -x509 -subj '/C=US/ST=Grace/L=Gotham/O=Org/CN=*.local.test' -nodes -keyout server.key -out server.crt -addext 'subjectAltName=DNS:*.local.test,DNS:local.test,DNS:www.example.com'
# Sign request, create key.
openssl req -new -x509 -days 3650 -nodes -subj '/C=US/ST=Grace/L=Gotham/O=Org/CN=MyCA' -keyout ca.key -out ca.crt
openssl req -new -keyout server.key -out server.csr -nodes -subj '/C=US/ST=Grace/L=Gotham/O=Org/CN=*.local.test'
# Sign cert.
echo "subjectAltName=DNS:*.local.test,DNS:local.test,DNS:www.example.com" | sudo tee extfile.cnf > /dev/null
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 3650 -extfile extfile.cnf
# Readable by Apache user _www.
chown _www /opt/local/etc/apache2/server.key

# Enable SSL default conf file
cp /opt/local/etc/apache2/extra/httpd-ssl.conf.orig /opt/local/etc/apache2/extra/httpd-ssl.conf

echo 'Include etc/apache2/extra/httpd-ssl.conf' >> /opt/local/etc/apache2/httpd.conf

# Enable Apache module support for SSL.
/opt/local/bin/apxs -a -e -n ssl mod_ssl.so
/opt/local/bin/apxs -a -e -n cache mod_cache.so
/opt/local/bin/apxs -a -e -n cache_socache mod_cache_socache.so
/opt/local/bin/apxs -a -e -n socache_shmcb mod_socache_shmcb.so

# Start Apache
port load apache2

# Back up system binaries.
echo "Ignore any errors that appear below. If System Integrity Protection is"
echo "enabled (which is the default) macOS will not let us change /usr/bin."
mv /usr/bin/php /usr/bin/php.stock
mv /usr/bin/php-config /usr/bin/php-config.stock
mv /usr/bin/phpize /usr/bin/phpize.stock
echo "OK, start paying attention to errors again."

# Map php, php-config, phpize to php81.
port select php php81

# Use GNU patch
port install gpatch
ln -s /opt/local/bin/gpatch /opt/local/bin/patch

echo 'te() { tail -f /opt/local/var/log/apache2/error_log; }' >> ~/.bash_profile
echo 'ta() { tail -f /opt/local/var/log/apache2/access_log; }' >> ~/.bash_profile
echo 'tp() { tail -f /var/log/php.log; }' >> ~/.bash_profile
echo "alias acr='sudo port unload apache2;sleep 5;sudo port load apache2'" >> ~/.bash_profile
echo
echo "MySQL was not installed. To install, run separate script build_mysql."
echo "Complete. Open a new Terminal window for profile settings to take effect."
echo
echo "PHP 8.3, 8.2, 8.1, 7.4 and 7.3 have been installed. PHP 8.1 is selected already."
echo "To switch back and forth:"
echo
echo "1. Use the port select command to select your command-line version of PHP."
echo "2. Use apxs to tell Apache to disable all modules except the one you want."
echo
echo "Examples:"
echo
echo "Switch to PHP 8.0:"
echo "sudo port select php php80"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php81.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php82.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php83.so"
echo "sudo /opt/local/bin/apxs -a -e -n php mod_php80.so"
echo "acr"
echo
echo "Switch to PHP 8.1:"
echo "sudo port select php php81"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php80.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php82.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php83.so"
echo "sudo /opt/local/bin/apxs -a -e -n php mod_php81.so"
echo "acr"
echo
echo "Switch to PHP 8.2:"
echo "sudo port select php php82"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php80.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php81.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php83.so"
echo "sudo /opt/local/bin/apxs -a -e -n php mod_php82.so"
echo "acr"
echo
echo "Switch to PHP 8.3:"
echo "sudo port select php php83"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php80.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php81.so"
echo "sudo /opt/local/bin/apxs -A -e -n php mod_php82.so"
echo "sudo /opt/local/bin/apxs -a -e -n php mod_php83.so"
echo "acr"
echo
echo 'Note that if MacPorts put its $PATH modification code into .profile then'
echo ".bash_profile will not be run."
echo "See http://stackoverflow.com/questions/18773051/how-to-make-os-x-to-read-bash-profile-not-profile-file"
